################################################################################
#  LOAD PACKAGES
################################################################################
library(dplyr)
library(ggplot2)
library(lme4)
library(car)
library(jtools)
library(texreg)
library(haven)
library(labelled)
library(sjPlot)
library(scales)
library(broom.mixed)
library(interactions)

################################################################################
#  LOAD AND PREPARE DATA
################################################################################
data <- X160525

data <- data %>% 
  filter(eduyrs <= 25, eduyrs >= 5, edctn != 1)

################################################################################
#  TRANSFORM VARIABLES
################################################################################
# Recode income variables and filter invalid levels
data <- data %>%
  mutate(
    income = recode(hinctnt,
                    "hinctntJ" = "< €1.800", "hinctntR" = "€1.800–3.600", 
                    "hinctntC" = "€3.600–6.000", "hinctntM" = "€6.000–12.000", 
                    "hinctntF" = "€12.000–18.000", "hinctntS" = "€18.000–24.000", 
                    "hinctntK" = "€24.000–30.000", "hinctntP" = "€30.000–36.000", 
                    "hinctntD" = "€36.000–60.000", "hinctntH" = "€60.000–90.000", 
                    "hinctntU" = "€90.000–120.000", "hinctntN" = "> €120.000",
                    .default = NA_character_
    ),
    income = factor(income, levels = c(
      "< €1.800", "€1.800–3.600", "€3.600–6.000", "€6.000–12.000", 
      "€12.000–18.000", "€18.000–24.000", "€24.000–30.000", "€30.000–36.000", 
      "€36.000–60.000", "€60.000–90.000", "€90.000–120.000", "> €120.000"
    )),
    model = factor(model, levels = c("Global depression index", "Heaviness", "Negative outlook", "Anhedonia"))
  ) %>%
  filter(!is.na(income))

# Remove invalid responses
invalid_income_levels <- c("Refusal", "Don't know", "No answer")
data <- data %>%
  filter(!hinctnt %in% invalid_income_levels) %>%
  filter(!emprf14 %in% invalid_income_levels) %>%
  filter(!emprm14 %in% invalid_income_levels) %>%
  filter(!edulvlfa %in% invalid_income_levels) %>%
  filter(!edulvlma %in% invalid_income_levels) %>%
  filter(!health_fac %in% invalid_income_levels)

# Create age deciles
data <- data %>%
  mutate(age_decile = ntile(agea, 10))

################################################################################
#  DESCRIPTIVE STATISTICS
################################################################################
# Define variables to describe
vars_used <- c(
  "dep_10", "heavy", "negativeoutlook", "anhedonia", "eduyrs", 
  "edulvlfa", "edulvlma", "hinctnt", "agea", "rtrd", "uempla", 
  "edctn", "health", "sclmeet", "rlgblg", "gndr", "bthcld", "partner"
)

# Subset data based on selected variables
df_sub <- data[, vars_used]

# Identify numeric and factor variables
nums  <- names(df_sub)[sapply(df_sub, is.numeric)]
facts <- names(df_sub)[sapply(df_sub, function(x) is.factor(x) || is.character(x))]

# Function to calculate summary statistics for numeric variables
get_numeric_stats <- function(x) {
  x_noNA <- x[!is.na(x)]
  c(
    Mean = mean(x_noNA), SD = sd(x_noNA), Missing = sum(is.na(x)), 
    Min = min(x_noNA), Max = max(x_noNA), N = length(x_noNA)
  )
}

# Apply function to numeric columns
num_stats_list <- lapply(nums, function(varname) {
  stats <- get_numeric_stats(df_sub[[varname]])
  data.frame(Variable = varname, t(as.data.frame(stats)), row.names = NULL, check.names = FALSE)
})
num_stats_df <- bind_rows(num_stats_list) %>%
  mutate(across(-Variable, ~ round(.x, 2)))

# Calculate frequency distribution for categorical variables
fact_stats_list <- lapply(facts, function(varname) {
  fx <- df_sub[[varname]]
  freq <- table(fx, useNA = "ifany")
  freq_df <- as.data.frame(freq, stringsAsFactors = FALSE)
  colnames(freq_df) <- c("Category", "Count")
  freq_df$Variable <- varname
  freq_df$Missing  <- sum(is.na(fx))
  freq_df
})

fact_stats_df <- bind_rows(fact_stats_list) %>%
  select(Variable, Category, Count, Missing)

# Display results
cat("\n---- Numeric Variables (Mean, SD, Missing, Min, Max, N) ----\n")
print(num_stats_df)

cat("\n\n---- Categorical/Factor Variables (Category Distribution + Missing) ----\n")
print(fact_stats_df)

# Missing values summary
sapply(select(data, badconditions, distrust, exhaustion, pessimism, depression, gndr, agea, edulvla, edulvlfa, edulvlma, hinctnt), function(x) sum(is.na(x)))

################################################################################
#  CRONBACH'S ALPHA
################################################################################
library(psych)

# Convert relevant columns to numeric
data$fltdpr <- as.numeric(as_factor(data$fltdpr))
data$fltsd  <- as.numeric(as_factor(data$fltsd))
data$fltlnl  <- as.numeric(as_factor(data$fltlnl))
data$slprl  <- as.numeric(as_factor(data$slprl))
data$dclvlf  <- as.numeric(as_factor(data$dclvlf))
data$optftr  <- as.numeric(as_factor(data$optftr))
data$flrms  <- as.numeric(as_factor(data$flrms))
data$pstvms  <- as.numeric(as_factor(data$pstvms))
data$lfcllk  <- as.numeric(as_factor(data$lfcllk))
data$absddng  <- as.numeric(as_factor(data$absddng))
data$enrglot  <- as.numeric(as_factor(data$enrglot))
data$enjlf  <- as.numeric(as_factor(data$enjlf))
data$wrhpp  <- as.numeric(as_factor(data$wrhpp))

# Cronbach's alpha calculations for selected indices
index_vars <- na.omit(data[, c("fltdpr", "fltsd", "fltlnl", "slprl", "dclvlf", "optftr", "flrms", "pstvms", "lfcllk", "absddng", "enrglot", "enjlf", "wrhpp")])
alpha(index_vars)
alpha(index_vars, check.keys = TRUE)
alpha(data[, c("fltdpr", "fltsd")])$total$raw_alpha

################################################################################
#  CORRELATION OVERVIEW
################################################################################
# Correlations among depression and related variables
cor(data[, c("negativeoutlook", "dep_10", "heavy", "anhedonia")], use = "complete.obs")
cor(data$hinctnt, data$eduyrs, use = "complete.obs", method = "pearson")
cor(data$edulvlfa, data$eduyrs, use = "complete.obs", method = "pearson")
cor(data$edulvlma, data$eduyrs, use = "complete.obs", method = "pearson")

# Country-level correlations
data %>%
  group_by(cntry) %>%
  summarise(correlation = cor(hinctnt, eduyrs, use = "complete.obs", method = "pearson"), 
            n = sum(!is.na(hinctnt) & !is.na(eduyrs)))

################################################################################
#  HISTOGRAMS
################################################################################
# Distribution of years of education
ggplot(data, aes(x = eduyrs)) +
  geom_histogram(aes(y = ..density..), binwidth = 1, fill = "#87CEFA", color = "white", alpha = 0.7) +
  geom_density(adjust = 1.5, color = "#E69F00", size = 1.2) +
  geom_vline(aes(xintercept = mean(eduyrs, na.rm = TRUE)), linetype = "dashed", color = "forestgreen", size = 1) +
  scale_y_continuous(labels = scales::percent_format()) +  
  xlim(0, 25) +
  labs(title = "Distribution of years of education", subtitle = "Histogram with Density Curve and Mean Line", x = "Years of education", y = "Density") +
  theme_light(base_size = 15) +
  theme(plot.title = element_text(face = "bold"), plot.subtitle = element_text(color = "gray40"), axis.title = element_text(face = "bold"), panel.grid.minor = element_blank())

# Proportion of father's education by age decile
p1 <- ggplot(data, aes(x = factor(age_decile), fill = edulvlfa)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_fill_brewer(palette = "Blues") +
  labs(x = "Age decile", y = "Proportion", fill = "Father's education") +
  theme_minimal(base_size = 13) +
  theme(plot.title = element_text(face = "bold"), axis.title = element_text(face = "bold"))

# Proportion of mother's education by age decile
p2 <- ggplot(data, aes(x = factor(age_decile), fill = edulvlma)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_fill_brewer(palette = "Blues") +
  labs(x = "Age decile", y = "Proportion", fill = "Mother's education") +
  theme_minimal(base_size = 13) +
  theme(plot.title = element_text(face = "bold"), axis.title = element_text(face = "bold"))

# Combine plots side by side
p1 + p2

# Global depression index distribution
ggplot(data, aes(x = dep_10)) +
  geom_histogram(aes(y = ..density..), binwidth = 0.22, fill = "#87CEFA", color = "white", alpha = 0.5) +
  geom_density(adjust = 1.5, color = "#E69F00", size = 1.2) +
  geom_vline(aes(xintercept = mean(dep_10, na.rm = TRUE)), linetype = "dashed", color = "forestgreen", size = 1) +
  scale_y_continuous(labels = scales::percent_format()) +  
  labs(title = "Global Depression Index Distribution", subtitle = "Histogram with Density Curve and Mean Line", x = "Global Depression Index", y = "Density") +
  theme_light(base_size = 15) +
  theme(plot.title = element_text(face = "bold"), plot.subtitle = element_text(color = "gray40"), axis.title = element_text(face = "bold"), panel.grid.minor = element_blank())

#-----------------------------------MODELS-------------------------------------#

#######MODELING#####

# Empty model with random effects
m1 <- lmer(dep_10 ~ +(1 | cntry), data)
m2 <- lmer(heavy ~  +(1 | cntry), data)
m3 <- lmer(negativeoutlook ~ +(1 | cntry), data)
m4 <- lmer(anhedonia ~ + (1 | cntry), data)

screenreg(list(m1, m2, m3, m4), 
          custom.model.names = c("Depression index", "Heaviness", "Negative outlook", "Anhedonia"), 
          digits = 3, 
          caption = "Table 1: Empty model")

# ICC calculations for each model
icc(m1)
icc(m2)
icc(m3)
icc(m4)

# Further models: Including gender and age
m1 <- lmer(dep_10 ~ gndr + ns(agea, df = 4)  +(1 | cntry), data)
m2 <- lmer(heavy ~ gndr + ns(agea, df = 4)   +(1 | cntry), data)
m3 <- lmer(negativeoutlook ~ gndr + ns(agea, df = 4)  +(1 | cntry), data)
m4 <- lmer(anhedonia ~ gndr + ns(agea, df = 4)  + (1 | cntry), data)

screenreg(list(m1, m2, m3, m4), 
          custom.model.names = c("Depression index", "Heaviness", "Negative outlook", "Anhedonia"), 
          digits = 3, 
          caption = "Table 2: Baseline model with gender and age")

# VIF (Variance Inflation Factor) for multicollinearity check
vif(m1)
vif(m2)
vif(m3)
vif(m4)

# Graphs for predicted values based on education and gender
pred <- ggpredict(m1, terms = c("agea[28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70]", "gndr"))
p1 <- ggplot(pred, aes(x = x, y = predicted, color = group)) +
  geom_line(size = 1) +
  labs(x = "Age", y = "Predicted depression score", color = "Gender") +
  theme_minimal()

# Apply the same process for other models (heavy, negative outlook, anhedonia)
